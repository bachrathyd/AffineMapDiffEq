5 + 5
using Revise
#includet("src\\DDE_mapping.jl")
includet("src\\DDE_mapping_types.jl")
includet("src\\DDE_mapping_functions.jl")

using BenchmarkTools
using Plots
plotly()
using Profile
using StaticArrays
using DifferentialEquations

# using Memoization

using MDBM
#TODO:  @fastmath @inbounds
#@memoize
function f_now(p, t)
    ζ, δ, ϵ, b, τ, T = p
    # println("Computed $t")
    # println("Computed $p")
    SA[-(δ + ϵ * cos(t)), -2*ζ]
    #SA[-(δ+ϵ*sign(cos(t))), -2*ζ]
end
#@memoize 
function f_past(p, t)
    ζ, δ, ϵ, b, τ, T = p
    SA[b, 0]
end

function DelayMathieu(u, h, p, t)
    ζ, δ, ϵ, b, τ, ν, T = p
    dx = u[2]
    #ddx = [-(δ+ϵ*cos(t)), -2*ζ]' * u + b * h(p, t - τ)[1] # Traditional Delayed Mathieu equation
    #sign
    ddx = [-(δ + ϵ * (cos(t))), -2 * ζ]' * u + b * h(p, t - τ)[1] + ν * h(p, t - τ, Val{1})[2]#The last part is a test for neutral system
    SA[dx, ddx]
end


ζ = 0.03
δ = 1.1
ϵ = 0.9
τ = 2pi
b = 0.2
ν = 0.25 # Neutral coefficient
T = 6;
2pi;
p = ζ, δ, ϵ, b, τ, ν, T
#p = (ζ, ωn, k, τ,10.0)

u0 = SA[1.0, 1.0]
h(p, t::Float64) = SA[0.5; -1.0]
h(p, t::Float64, deriv::Type{Val{1}}) = SA[0.0, 0.0]
probMathieu = DDEProblem(DelayMathieu,  h, (0.0, T * 10.0), p; constant_lags=[τ], neutral=true)

sol = solve(probMathieu, MethodOfSteps(BS3()))#abstol,reltol
plot(sol)
#t=(-3.0:0.5:63)
#scatter!(t,getindex.(sol.(t),1))
#t=(-3.0:0.1:00)
#scatter!(t,getindex.([h(p, tt) for tt in t],1),xlims = (-10,70),)
#t=(-3.0:0.52:63)
#scatter!(t,getindex.([getvalues(sol,tt) for tt in t],1),xlims = (-10,70),)

plot(sol(sol.t[end] .- (0.0:0.01:τ*1.0)))

Base.:+(a::SVector, b::Bool) = a .+ b


τmax = 2pi + 0.00001
Nstep = 50
TsampledSol=sol.t[sum(sol.t .< (sol.t[end]-τmax))-1:end] .- sol.t[end]

#dpdp = dynamic_problemSampled(probMathieu, MethodOfSteps(BS3()), τmax, T; Historyresolution=TsampledSol, eigN=20, zerofixpont=true);
dpdp = dynamic_problemSampled(probMathieu, MethodOfSteps(BS3()), τmax, T; Historyresolution=Nstep, eigN=5, zerofixpont=true);

# fix point by affine map
muaff, s0aff = affine(dpdp; p=p);
mus0, As = spectrum(dpdp; p=p);
plot(log.(abs.(muaff[1])))
plot!(log.(abs.(mus0)))

@benchmark affine($dpdp; p=$p)

scatter(muaff[1])
scatter!(mus0)
plot!(sin.(0:0.01:2pi), cos.(0:0.01:2pi))

#Stability Chart


using MDBM
dpdp = dynamic_problemSampled(probMathieu, MethodOfSteps(BS3()), τmax, T;
    Historyresolution=50, eigN=1, zerofixpont=true,
    adaptive=false,KrylovTol=1e-5,KrylovExtraDim=5);

ax1 = Axis(-1:0.5:15, "δ") # initial grid in x direction
ax2 = Axis(0.0:1.0:15.0, "ϵ") # initial grid in y direction
b = 0.00
ν = 0.00;
0.0;
ζ = 0.0001
function fooMathieu(δ, ϵ)
    ABSmuMax = spectralradius(dpdp; p=(ζ, δ, ϵ, b, τ, ν, T))
    return ABSmuMax - 1.0
end
mymdbm = MDBM_Problem(fooMathieu, [ax1, ax2])
iteration = 4#number of refinements (resolution doubling)
@time MDBM.solve!(mymdbm, iteration)
#points where the function foo was evaluated
x_eval, y_eval = getevaluatedpoints(mymdbm)
#interpolated points of the solution (approximately where foo(x,y) == 0 and c(x,y)>0)
x_sol, y_sol = getinterpolatedsolution(mymdbm)
#scatter(x_eval,y_eval,markersize=1)
#scatter!(x_sol,y_sol,markersize=3)
scatter(x_sol, y_sol, markersize=2)




ax1 = Axis(-1:0.5:5, "δ") # initial grid in x direction
ax2 = Axis(-1.5:0.4:1.5, "b") # initial grid in y direction
ϵ = 2.0
function fooDelay(δ, b)
    ABSmuMax = spectralradius(dpdp; p=(ζ, δ, ϵ, b, τ, ν, T))
    return ABSmuMax - 1.0
end
mymdbm = MDBM_Problem(fooDelay, [ax1, ax2])
@time MDBM.solve!(mymdbm, 4)
#points where the function foo was evaluated
x_eval, y_eval = getevaluatedpoints(mymdbm)
x_sol, y_sol = getinterpolatedsolution(mymdbm)
#scatter(x_eval,y_eval,markersize=1)
#scatter!(x_sol,y_sol,markersize=2)
scatter(x_sol, y_sol, markersize=1)






ax1 = Axis(-1:0.5:5, "δ") # initial grid in x direction
ax2 = Axis(-1.5:0.4:1.5, "b") # initial grid in y direction
ax3 = Axis(0.0:1:8.0, "ϵ") # initial grid in y direction
#ax3=Axis(0.0:0.5:4.0,"ϵ/2") # initial grid in y direction

function fooDelayMathieu(δ, b, ϵ)
    ABSmuMax = spectralradius(dpdp; p=(ζ, δ, ϵ, b, τ, ν, T))
    return ABSmuMax - 1.0
end
mymdbm = MDBM_Problem(fooDelayMathieu, [ax1, ax2, ax3])
@time MDBM.solve!(mymdbm, 2)

x_sol, y_sol, z_sol = getinterpolatedsolution(mymdbm)

scatter(x_sol, y_sol, z_sol, markersize=1)

