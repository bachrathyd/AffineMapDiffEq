5+5
using Revise
#includet("src\\DDE_mapping.jl")
includet("src\\DDE_mapping_types.jl")
includet("src\\DDE_mapping_functions.jl")

using BenchmarkTools
using Plots
plotly()
using Profile
using StaticArrays
using DifferentialEquations

# using Memoization

using MDBM
#TODO:  @fastmath @inbounds
#@memoize
function f_now(p, t)
    ζ, δ, ϵ, b, τ , T  = p
   # println("Computed $t")
   # println("Computed $p")
   @fastmath SA[-(δ+ϵ*cos(t)), -2*ζ]
end
#@memoize 
function f_past(p, t)
    ζ, δ, ϵ, b, τ , T  = p
    SA[b, 0]
end
#f_now(p, 0.6)' * SA[1.0, 1.0]

function DelayMathieu(u, h, p, t)
    # Parameters
    ζ, δ, ϵ, b, τ , T = p
    # Components of the delayed differential equation
    dx = u[2]
    @fastmath ddx = f_now(p, t)' * u + b * h(p, t - τ)[1]  # Surface regeneration effect
    # Update the derivative vector
    SA[dx, ddx]
end
Base.:+(a::SVector, b::Bool) = a .+ b


##<<<<<<<<<<< Lin Map based on
NF=Float64
ζ = NF(0.02)          # damping coefficient
δ = NF(1.5)#0.2          # nat. freq
ϵ = NF(0.15)#4#5#8;#5         # cut.coeff
τ = NF(2pi)          # Time delay
b = NF(0.5)
T= NF(2pi)
p = ζ, δ, ϵ, b, τ , T
#p = (ζ, ωn, k, τ,10.0)

# test simulation
u0 = SA{NF}[1.0, 0.0]
h(p, t) = SA{NF}[0.0; 0.0]
probMathieu = DDEProblem(DelayMathieu, u0, h, (NF(0.0), NF(T * 10.0)), p; constant_lags=[τ])

#StateSmaplingTime = LinRange(-τ, 0.0, 200) .+ T

#solve(prob,RK4();dt=0.005,adaptive=false)
sol = solve(probMathieu, MethodOfSteps(BS3()))#abstol,reltol
plot(sol)
plot(sol(sol.t[end] .- (0.0:0.01:τ*1.0)))


Nstep = 20
τmax = NF(2pi+0.1)
dpdp = dynamic_problemSampled(probMathieu, MethodOfSteps(BS3()), τmax,
 T; Historyresolution=Nstep, eigN=1, zerofixpont=true);

# fix point by affine map
muaff, s0aff = affine(dpdp; p=p);
plot(log.(abs.(muaff[1])))
mus0, As = spectrum(dpdp; p=p);
scatter!(1:size(mus0,1),log.(abs.(mus0)))

scatter(muaff[1])
scatter!(mus0)
plot!(sin.(0:0.01:2pi),cos.(0:0.01:2pi))

#@code_warntype spectrum(dpdp; p=p)
#@code_warntype affine(dpdp; p=p)
#@code_warntype spectralradius(dpdp; p=p)
#Nstep = size(dpdp.StateSmaplingTime, 1)
#s0 = zeros(typeof(dpdp.DDEdynProblem.u0), Nstep)
#v0 = LinMap(dpdp, s0; p=p)
#@benchmark  LinMap($dpdp, $s0; p=$p)
@benchmark spectrum($dpdp; p=$p)
mu=spectrum(dpdp; p=p);
t=@benchmark spectralradius($dpdp; p=$p)

BenchmarkTools.median(t).time
BenchmarkTools.std(t).time
##@benchmark affine($dpdp; p=$p)
#
#function foo()
#    for _ in 1:1000
#        spectrum(dpdp; p=p)
#        #affine(dpdp; p=p)
#    end
#end
#
#using Profile
#using PProf
##@profile  foo();#abstol,reltol
#@profview foo();#abstol,reltol


using MDBM

ax1=Axis(-1:0.5:5,"δ") # initial grid in x direction
ax2=Axis(0.0:1.0:8.0,"ϵ") # initial grid in y direction
b=-0.00
function fooMathieu(δ, ϵ)
    ABSmuMax=spectralradius(dpdp;  p = (ζ, δ, ϵ, b, τ , T));
    return ABSmuMax-1.0
end
mymdbm=MDBM_Problem(fooMathieu,[ax1,ax2])
iteration=4#number of refinements (resolution doubling)
@time MDBM.solve!(mymdbm,iteration)
#points where the function foo was evaluated
x_eval,y_eval=getevaluatedpoints(mymdbm)
#interpolated points of the solution (approximately where foo(x,y) == 0 and c(x,y)>0)
x_sol,y_sol=getinterpolatedsolution(mymdbm)
#scatter(x_eval,y_eval,markersize=1)
#scatter!(x_sol,y_sol,markersize=3)
scatter(x_sol,y_sol,markersize=1)


ax1=Axis(-1:0.5:5,"δ") # initial grid in x direction
ax2=Axis(-1.5:0.4:1.5,"b") # initial grid in y direction
ϵ=2.0
function fooDelay(δ, b)
    ABSmuMax=spectralradius(dpdp;  p = (ζ, δ, ϵ, b, τ , T));
    return ABSmuMax-1.0
end
mymdbm=MDBM_Problem(fooDelay,[ax1,ax2])
@time MDBM.solve!(mymdbm,4)
#points where the function foo was evaluated
x_eval,y_eval=getevaluatedpoints(mymdbm)
x_sol,y_sol=getinterpolatedsolution(mymdbm)
#scatter(x_eval,y_eval,markersize=1)
#scatter!(x_sol,y_sol,markersize=2)
scatter(x_sol,y_sol,markersize=1)






ax1=Axis(-1:0.5:5,"δ") # initial grid in x direction
ax2=Axis(-1.5:0.4:1.5,"b") # initial grid in y direction
ax3=Axis(0.00:1:8.0,"ϵ") # initial grid in y direction

function fooDelayMathieu(δ, b, ϵ)
    ABSmuMax=spectralradius(dpdp;  p = (ζ, δ, ϵ, b, τ , T));
    return ABSmuMax-1.0
end
mymdbm=MDBM_Problem(fooDelayMathieu,[ax1,ax2,ax3])
@time MDBM.solve!(mymdbm,2)

x_sol,y_sol,z_sol=getinterpolatedsolution(mymdbm)

scatter(x_sol,y_sol,z_sol,markersize=1)

